{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Arcade","text":"arcade Namespace containing classes and types related to the Arcade project."},{"location":"#types","title":"Types","text":"Name Description Vector Template class representing a generic 2D vector. Core Main class of the Arcade project"},{"location":"Core/","title":"Core","text":"<p>class Core</p> <p>Main class of the Arcade project</p>"},{"location":"Core/#functions","title":"Functions","text":"Name Description Core Constructor ~Core Destructor"},{"location":"Core/#function-details","title":"Function Details","text":""},{"location":"Core/#core_1","title":"Core","text":"<p>Core()</p> <p>Constructor</p>"},{"location":"Core/#core_2","title":"~Core","text":"<p>~Core()</p> <p>Destructor</p>"},{"location":"Vector/","title":"Vector","text":"<p>template &lt;typename T&gt; class Vector</p> <p>Template class representing a generic 2D vector.</p> <code>T</code> Type of the vector coordinates."},{"location":"Vector/#variables","title":"Variables","text":"Name Description _x X coordinate. _y Y coordinate."},{"location":"Vector/#operators","title":"Operators","text":"Name Description operator+ Operator overloads  <code>other</code> :    Other vector  Return :    Vector object"},{"location":"Vector/#functions","title":"Functions","text":"Name Description Vector Constructor with initial values. Vector Default constructor (zero vector). getX Get the X values  Return :    X values getY Get the Y values  Return :    Y values setX Set the X value  <code>x</code> :    X value setY Set the Y value  <code>y</code> :    Y value"},{"location":"Vector/#variable-details","title":"Variable Details","text":""},{"location":"Vector/#_x","title":"_x","text":"<p>T _x</p> <pre><code>X coordinate.\n</code></pre>"},{"location":"Vector/#_y","title":"_y","text":"<p>T _y</p> <pre><code>Y coordinate.\n</code></pre>"},{"location":"Vector/#operator-details","title":"Operator Details","text":""},{"location":"Vector/#operator","title":"operator+","text":"<p>T operator+(const Vector&lt;T&gt;&amp; other) const</p> <p>Operator overloads</p> <code>other</code> Other vector Return Vector object"},{"location":"Vector/#function-details","title":"Function Details","text":""},{"location":"Vector/#vector_1","title":"Vector","text":"<p>Vector(T x, T y)</p> <p>Constructor with initial values.</p> <code>x</code> X coordinate. <code>y</code> Y coordinate. <p>Vector()</p> <p>Default constructor (zero vector).</p>"},{"location":"Vector/#getx","title":"getX","text":"<p>T getX() const</p> <p>Get the X values</p> Return X values"},{"location":"Vector/#gety","title":"getY","text":"<p>T getY() const</p> <p>Get the Y values</p> Return Y values"},{"location":"Vector/#setx","title":"setX","text":"<p>void setX(T x)</p> <p>Set the X value</p> <code>x</code> X value"},{"location":"Vector/#sety","title":"setY","text":"<p>void setY(T y)</p> <p>Set the Y value</p> <code>y</code> Y value"},{"location":"arcade/","title":"arcade","text":"<p>Namespace containing classes and types related to the Arcade project.</p> <p>Manages multiple dynamic libraries Class to load dynamic libraries &amp; encapsulate them</p>"},{"location":"arcade/#types","title":"Types","text":"Name Description DynamicLibraryManager DynamicLibraryObject LibraryType Represents the types of dynamic libraries."},{"location":"arcade/DynamicLibraryManager/","title":"DynamicLibraryManager","text":"<p>class DynamicLibraryManager</p>"},{"location":"arcade/DynamicLibraryManager/#variables","title":"Variables","text":"Name Description _libraries Loaded libraries _typeIndices Type indices"},{"location":"arcade/DynamicLibraryManager/#functions","title":"Functions","text":"Name Description DynamicLibraryManager Constructor  <code>directory</code> :    Directory to search for libraries  <code>loadImmediately</code> :    Whether to load libraries immediately scanDirectory Scan a directory for libraries  <code>directory</code> :    Directory path  <code>loadDiscovered</code> :    Whether to load discovered libraries  Return :    Number of libraries found loadLibrary Load a specific library  <code>path</code> :    Path to the library  <code>type</code> :    Type of the library  Return :    Shared pointer to the loaded library findLibrary Find a library by name  <code>name</code> :    Name of the library  Return :    Shared pointer to the library if found, nullptr otherwise getLibrariesByType Get all libraries of a specific type  <code>type</code> :    Type of libraries to retrieve  Return :    Vector of libraries of the specified type getAllLibraries Get all loaded libraries  Return :    Vector of all loaded libraries getNextLibrary Get the next library of a specific type  <code>type</code> :    Type of library to get  Return :    Next library of specified type determineLibraryType Determine library type from filename or content  <code>path</code> :    Path to the library  Return :    Determined library type extractNameFromPath Extract name from path  <code>path</code> :    File path  Return :    Filename without path and extension"},{"location":"arcade/DynamicLibraryManager/#variable-details","title":"Variable Details","text":""},{"location":"arcade/DynamicLibraryManager/#_libraries","title":"_libraries","text":"<p>std::vector&lt;std::shared_ptr&lt;DynamicLibraryObject&gt;&gt; _libraries</p> <p>Loaded libraries</p>"},{"location":"arcade/DynamicLibraryManager/#_typeindices","title":"_typeIndices","text":"<p>std::map&lt;LibraryType, size_t&gt; _typeIndices</p> <p>Type indices</p>"},{"location":"arcade/DynamicLibraryManager/#function-details","title":"Function Details","text":""},{"location":"arcade/DynamicLibraryManager/#dynamiclibrarymanager_1","title":"DynamicLibraryManager","text":"<p>DynamicLibraryManager(const std::string&amp; directory = \"./lib\", bool loadImmediately = false)</p> <p>Constructor</p> <code>directory</code> Directory to search for libraries <code>loadImmediately</code> Whether to load libraries immediately"},{"location":"arcade/DynamicLibraryManager/#determinelibrarytype","title":"determineLibraryType","text":"<p>LibraryType determineLibraryType(const std::string&amp; path)</p> <p>Determine library type from filename or content</p> <code>path</code> Path to the library Return Determined library type"},{"location":"arcade/DynamicLibraryManager/#extractnamefrompath","title":"extractNameFromPath","text":"<p>std::string extractNameFromPath(const std::string&amp; path) const</p> <p>Extract name from path</p> <code>path</code> File path Return Filename without path and extension"},{"location":"arcade/DynamicLibraryManager/#findlibrary","title":"findLibrary","text":"<p>std::shared_ptr&lt;DynamicLibraryObject&gt; findLibrary(const std::string&amp; name) const</p> <p>Find a library by name</p> <code>name</code> Name of the library Return Shared pointer to the library if found, nullptr otherwise"},{"location":"arcade/DynamicLibraryManager/#getalllibraries","title":"getAllLibraries","text":"<p>const std::vector&lt;std::shared_ptr&lt;DynamicLibraryObject&gt;&gt;&amp; getAllLibraries() const</p> <p>Get all loaded libraries</p> Return Vector of all loaded libraries"},{"location":"arcade/DynamicLibraryManager/#getlibrariesbytype","title":"getLibrariesByType","text":"<p>std::vector&lt;std::shared_ptr&lt;DynamicLibraryObject&gt;&gt; getLibrariesByType(LibraryType type) const</p> <p>Get all libraries of a specific type</p> <code>type</code> Type of libraries to retrieve Return Vector of libraries of the specified type"},{"location":"arcade/DynamicLibraryManager/#getnextlibrary","title":"getNextLibrary","text":"<p>std::shared_ptr&lt;DynamicLibraryObject&gt; getNextLibrary(LibraryType type)</p> <p>Get the next library of a specific type</p> <code>type</code> Type of library to get Return Next library of specified type"},{"location":"arcade/DynamicLibraryManager/#loadlibrary","title":"loadLibrary","text":"<p>std::shared_ptr&lt;DynamicLibraryObject&gt; loadLibrary(const std::string&amp; path, LibraryType type = LibraryType::UNKNOWN)</p> <p>Load a specific library</p> <code>path</code> Path to the library <code>type</code> Type of the library Return Shared pointer to the loaded library"},{"location":"arcade/DynamicLibraryManager/#scandirectory","title":"scanDirectory","text":"<p>int scanDirectory(const std::string&amp; directory, bool loadDiscovered = true)</p> <p>Scan a directory for libraries</p> <code>directory</code> Directory path <code>loadDiscovered</code> Whether to load discovered libraries Return Number of libraries found"},{"location":"arcade/DynamicLibraryObject/","title":"DynamicLibraryObject","text":"<p>class DynamicLibraryObject</p>"},{"location":"arcade/DynamicLibraryObject/#variables","title":"Variables","text":"Name Description _handle Handle to the library !!! note The handle is automatically closed when the object is destroyed _name Name of the library _type Type of the library"},{"location":"arcade/DynamicLibraryObject/#functions","title":"Functions","text":"Name Description DynamicLibraryObject Constructor  <code>path</code> :    Path to the library  <code>type</code> :    Type of the library ~DynamicLibraryObject Destructor getFunction Get a function from the library  <code>FuncType</code> :    Type of the function  <code>symbolName</code> :    Name of the symbol  Return :    Function pointer getName Get the name of the library  Return :    Name of the library getType Get the type of the library  Return :    Type of the library"},{"location":"arcade/DynamicLibraryObject/#variable-details","title":"Variable Details","text":""},{"location":"arcade/DynamicLibraryObject/#_handle","title":"_handle","text":"<p>std::unique_ptr&lt;void, int(*)(void*)&gt; _handle</p> <p>Handle to the library</p> <p>Note</p> <p>The handle is automatically closed when the object is destroyed</p>"},{"location":"arcade/DynamicLibraryObject/#_name","title":"_name","text":"<p>std::string _name</p> <p>Name of the library</p>"},{"location":"arcade/DynamicLibraryObject/#_type","title":"_type","text":"<p>LibraryType _type</p> <p>Type of the library</p>"},{"location":"arcade/DynamicLibraryObject/#function-details","title":"Function Details","text":""},{"location":"arcade/DynamicLibraryObject/#dynamiclibraryobject_1","title":"DynamicLibraryObject","text":"<p>DynamicLibraryObject(const std::string&amp; path, LibraryType type)</p> <p>Constructor</p> <code>path</code> Path to the library <code>type</code> Type of the library"},{"location":"arcade/DynamicLibraryObject/#getfunction","title":"getFunction","text":"<p>template &lt;typename FuncType&gt; FuncType getFunction(const std::string&amp; symbolName)</p> <p>Get a function from the library</p> <code>FuncType</code> Type of the function <code>symbolName</code> Name of the symbol Return Function pointer"},{"location":"arcade/DynamicLibraryObject/#getname","title":"getName","text":"<p>std::string getName() const</p> <p>Get the name of the library</p> Return Name of the library"},{"location":"arcade/DynamicLibraryObject/#gettype","title":"getType","text":"<p>LibraryType getType() const</p> <p>Get the type of the library</p> Return Type of the library"},{"location":"arcade/DynamicLibraryObject/#dynamiclibraryobject_2","title":"~DynamicLibraryObject","text":"<p>~DynamicLibraryObject()</p> <p>Destructor</p>"},{"location":"arcade/LibraryType/","title":"LibraryType","text":"<p>enum class LibraryType</p> <p>Represents the types of dynamic libraries.</p> GRAPHIC_LIB Graphic library GAME Game library UNKNOWN Unknown type"}]}